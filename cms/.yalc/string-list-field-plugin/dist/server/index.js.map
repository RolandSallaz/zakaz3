{"version":3,"file":"index.js","sources":["../../server/src/bootstrap.ts","../../server/src/destroy.ts","../../server/src/register.ts","../../server/src/config/index.ts","../../server/src/content-types/index.ts","../../server/src/controllers/controller.ts","../../server/src/controllers/index.ts","../../server/src/middlewares/index.ts","../../server/src/policies/index.ts","../../server/src/routes/content-api.ts","../../server/src/routes/index.ts","../../server/src/services/service.ts","../../server/src/services/index.ts","../../server/src/index.ts"],"sourcesContent":["import type { Core } from '@strapi/strapi';\n\nconst bootstrap = ({ strapi }: { strapi: Core.Strapi }) => {\n  // bootstrap phase\n};\n\nexport default bootstrap;\r\n","import type { Core } from '@strapi/strapi';\n\nconst destroy = ({ strapi }: { strapi: Core.Strapi }) => {\n  // destroy phase\n};\n\nexport default destroy;\r\n","import { Core } from '@strapi/strapi';\n\nconst register = ({ strapi }: { strapi: Core.Strapi }) => {\n  strapi.customFields.register({\n    name: \"multi-select\",\n    plugin: 'string-list-field-plugin',\n    type: \"json\",\n    inputSize: {\n      default: 12,\n      isResizable: true\n    }\n  });\n};\n\n\nexport default register;\n","export default {\n  default: {},\n  validator() {},\n};\r\n","export default {};\r\n","import type { Core } from '@strapi/strapi';\n\nconst controller = ({ strapi }: { strapi: Core.Strapi }) => ({\n  index(ctx) {\n    ctx.body = strapi\n      .plugin('my-strapi-plugin')\n      // the name of the service file & the method.\n      .service('service')\n      .getWelcomeMessage();\n  },\n});\n\nexport default controller;\r\n","import controller from './controller';\n\nexport default {\n  controller,\n};\r\n","export default {};\r\n","export default {};\r\n","export default [\n  {\n    method: 'GET',\n    path: '/',\n    // name of the controller file & the method.\n    handler: 'controller.index',\n    config: {\n      policies: [],\n    },\n  },\n];\r\n","import contentAPIRoutes from './content-api';\n\nconst routes = {\n  'content-api': {\n    type: 'content-api',\n    routes: contentAPIRoutes,\n  },\n};\n\nexport default routes;\r\n","import type { Core } from '@strapi/strapi';\n\nconst service = ({ strapi }: { strapi: Core.Strapi }) => ({\n  getWelcomeMessage() {\n    return 'Welcome to Strapi ðŸš€';\n  },\n});\n\nexport default service;\r\n","import service from './service';\n\nexport default {\n  service,\n};\r\n","/**\n * Application methods\n */\nimport bootstrap from './bootstrap';\nimport destroy from './destroy';\nimport register from './register';\n\n/**\n * Plugin server methods\n */\nimport config from './config';\nimport contentTypes from './content-types';\nimport controllers from './controllers';\nimport middlewares from './middlewares';\nimport policies from './policies';\nimport routes from './routes';\nimport services from './services';\n\nexport default {\n  register,\n  bootstrap,\n  destroy,\n  config,\n  controllers,\n  routes,\n  services,\n  contentTypes,\n  policies,\n  middlewares,\n};\r\n"],"names":[],"mappings":";AAEA,MAAM,YAAY,CAAC,EAAE,aAAsC;AAE3D;ACFA,MAAM,UAAU,CAAC,EAAE,aAAsC;AAEzD;ACFA,MAAM,WAAW,CAAC,EAAE,aAAsC;AACxD,SAAO,aAAa,SAAS;AAAA,IAC3B,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,WAAW;AAAA,MACT,SAAS;AAAA,MACT,aAAa;AAAA,IAAA;AAAA,EACf,CACD;AACH;ACZA,MAAe,SAAA;AAAA,EACb,SAAS,CAAC;AAAA,EACV,YAAY;AAAA,EAAA;AACd;ACHA,MAAA,eAAe,CAAC;ACEhB,MAAM,aAAa,CAAC,EAAE,cAAuC;AAAA,EAC3D,MAAM,KAAK;AACL,QAAA,OAAO,OACR,OAAO,kBAAkB,EAEzB,QAAQ,SAAS,EACjB,kBAAkB;AAAA,EAAA;AAEzB;ACRA,MAAe,cAAA;AAAA,EACb;AACF;ACJA,MAAA,cAAe,CAAC;ACAhB,MAAA,WAAe,CAAC;ACAhB,MAAe,mBAAA;AAAA,EACb;AAAA,IACE,QAAQ;AAAA,IACR,MAAM;AAAA;AAAA,IAEN,SAAS;AAAA,IACT,QAAQ;AAAA,MACN,UAAU,CAAA;AAAA,IAAC;AAAA,EACb;AAEJ;ACRA,MAAM,SAAS;AAAA,EACb,eAAe;AAAA,IACb,MAAM;AAAA,IACN,QAAQ;AAAA,EAAA;AAEZ;ACLA,MAAM,UAAU,CAAC,EAAE,cAAuC;AAAA,EACxD,oBAAoB;AACX,WAAA;AAAA,EAAA;AAEX;ACJA,MAAe,WAAA;AAAA,EACb;AACF;ACcA,MAAe,QAAA;AAAA,EACb;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;;"}