version: "3"

services:
  frontend:
    container_name: "frontend"
    build:
      context: frontend
      dockerfile: Dockerfile
    restart: always
    ports:
      - 3000:3000
    networks:
      - net
    depends_on:
      - backend
      
  backend:
    container_name: "backend"
    build:
      context: backend
      dockerfile: Dockerfile
    restart: always
    environment:
      - NODE_ENV=production
      - PORT=1337
      - DATABASE_CLIENT=${DATABASE_CLIENT}
      - DATABASE_HOST=db
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
    ports:
      - 1337:1337
    volumes:
      - ./app:/srv/app
    depends_on:
      - db
    networks:
     - net

  db:
    container_name: postgres
    image: postgres:15
    restart: always
    volumes:
      - ./db:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    networks:
     - net

  nginx:
    restart: always
    build:
      context: nginx
    ports:
      - "80:80"
      - "443:443"
    entrypoint: /bin/sh
    command: -c 'while :; do sleep 6h && wait $${!}; nginx -s reload; done & /docker-entrypoint.sh nginx -g "daemon off;error_log /dev/stdout debug;"'
    volumes:
      - ./ssl:/etc/ssl
      - acme_challenge:/usr/share/nginx/html/.well-known
    environment:
   
      - DOMAIN=${DOMAIN}
    depends_on:
      - frontend
      - backend
      - certbot-init
    networks:
      - net
      
  certbot-init:
    image: certbot/certbot
    entrypoint: /bin/sh
    command: >-
      -c 'certbot certonly --webroot --webroot-path /usr/share/nginx/html
      -d ${DOMAIN} -m ${EMAIL_LOGIN} --agree-tos --force-renewal --noninteractive --verbose'
    ports:
      - 6000:80
    volumes:
      - ./ssl:/etc/letsencrypt
      - acme_challenge:/usr/share/nginx/html/.well-known
    environment:
      - DOMAIN=${DOMAIN}
      - EMAIL_LOGIN=${EMAIL_LOGIN}

  certbot:
    image: certbot/certbot
    entrypoint: /bin/sh
    command: -c 'trap exit TERM; while :; do certbot renew; sleep 24h && wait $${!}; done;'
    volumes:
      - ./ssl:/etc/ssl
      - acme_challenge:/usr/share/nginx/html/.well-known
    depends_on:
      nginx:
        condition: service_started
        required: true

networks:
  net:
    driver: bridge

volumes:
  acme_challenge:
